#!/usr/bin/env python
# ----------------------------------------------------------------------
# Copyright (C) 2015 Numenta Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# ----------------------------------------------------------------------
#
# Author: Joe Block <jpb@numenta.com>

"""
Helper script to read & print EC2 tags for the running instance.
"""

import argparse
import logging
import os

from boto import utils, ec2


def parseCommandLine():
  """
  Read the command line arguments

  @returns an argparse configuration object
  """
  parser = argparse.ArgumentParser(description="Read an EC2 tag")

  parser.add_argument("--tag-name",
                      help="EC2 tag to load",
                      dest="tagName",
                      default=None)

  return parser.parse_args()


def getConnection(accessKeyID, secretAccessKey, region="us-west-2"):
  """
  Get a boto connection

  @param accessKeyID - AWS access key id
  @param secretAccessKey - AWS secret access key
  @param region - region to connect to
  @returns Boto connection object
  """
  conn = ec2.connect_to_region(region,
                               aws_access_key_id=accessKeyID,
                               aws_secret_access_key=secretAccessKey)
  return conn


def loadTag(connection, instanceId, tagname="Name"):
  """
  Load a tag from EC2

  @param tagname: Name of tag to load
  @param connection: boto connection to use

  @returns tag value
  """
  # Get tag status for our instance_id using filters
  # http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ApiReference-cmd-DescribeTags.html
  tags = connection.get_all_tags(filters={"resource-id": instanceId,
                                          "key": tagname})
  if tags:
    tagValue = tags[0].value
  else:
    tagValue = None
    logging.error("No %s tag for %s", tagname, instanceId)
  return tagValue


def readEC2Tag():
  """
  Load an EC2 tag for the running instance & print it
  """
  configuration = parseCommandLine()

  # Import keys from os.env
  aws_access_key_id = os.environ.get("AWS_ACCESS_KEY_ID")
  aws_secret_access_key = os.environ.get("AWS_SECRET_ACCESS_KEY")

  # Load metadata. if  = {} we are on localhost
  # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html
  metadata = utils.get_instance_metadata(timeout=1, num_retries=3)
  region = metadata["placement"]["availability-zone"][:-1]
  instance_id = metadata["instance-id"]

  connection = getConnection(accessKeyID=aws_access_key_id,
                             secretAccessKey=aws_secret_access_key,
                             region=region)

  print loadTag(connection=connection,
                instanceId=instance_id,
                tagname=configuration.tagName)


if __name__ == "__main__":
  readEC2Tag()
